# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      CXX: mpc++
      FC: mpif90
    steps:
      # Free up some disk space in the runner
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-android: 'true'
          remove-dotnet:  'true'
          remove-haskell: 'true'
          remove-codeql:  'true'
      - uses: actions/checkout@v3
      # Setup MPI and Python for this job
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: openmpi
      - name: Set up Python 3.x
        uses: actions/setup-python@v3
      # Install dependencies, build and install
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools build
      - name: Build package
        run: |
          make requirements_full
          sed -i 's/USE_COMPILED  = ON/USE_COMPILED  = OFF/g' options.cfg
          make package-build
          make install
      # Publish to PyPi once the test-sute has been successfully run
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}